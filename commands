GIT
mkdir project
cd project
git --version
git config --global user.name "Bugs Bunny"
git config --global user.email bugs@gmail.com
git config --global push.default simple
git config --list

Bare Repo --> Shaing & Storing
mkdir mainrepo.git
cd mainrepo.git
git init --bare
ll

Non-Bare Repo  --> Shaing, Storing along with Edit & Modify
touch 1.java
echo "Line 1" > 1.java
cat 1.java
git status
git add . 
git status
git commit -m "perpose of the commit"
git log
echo "Line 2" >> 1.java

git add .
git commit -m "checkin set of changes"
git log
git show d085c941

sub to main (Master to Master)
git push

cd ../mainrepo.git/
git log

git clone main to sub2
git log
echo "Line 1" > 1.java
git status
git add .
git commit -m "checkin set of changes feom sub 2"
git push

What and all commit id there in main it will update ur local repo
git pull

Branch parllel development
git branch
git branch newrelease
git branch
git log
git checkout newrelease
git branch 
git log
touch 4.java
git status
git add.
git commit -m "4.java adding newrelease"
ll
git log
git checkout master
git branch
ll
git log
echo "test" > 5.java
git add .
git commit -m "adding 5.java from master"
git log
git checkout newrelease
ll
git log
git push --> we will get error bcoze newrelease branch in not there in main.git
git checkout master
git push   master(workspace)--> master (main.git)
cd ../main.git
git log
cd ../sub01
git checkout master
git merge newrelease master
:wq!
ll
git log
git push

merge 
echo "hi" > file
git add .
git commit -m "merge"

git checkout new
echo "hello" > file
git add .
git commit -m "new merge"

git checkout new
git merge new master

git push -u --all

git clone main.git sub2
git branch 
git branch -a
git checkout new
git branch 

cherry-pick ( only particulay commit merge )

git checkout new
echo "test" > name.html
git add .
git commit -m "test cherry-pick"
git log                          
git checkout master 
git cherry-pick commitid 

git log --> latest coomit id to oldest commit id order
git log -3 --> it will display 3 latest commit id 
git log -1 --> very latest one
git log --oneline  --> short form like 7 char commit id and message 
git log --oneline -3  3 latest commit id short form like 7 char commit id and message
git log --grep "checkin" --> string or pattren
git log --grep "checkin" --oneline


gitignore

touch 1.class
touch test.txt
git status
echo "1.class" > .gitignore
ll
ls -a
git status
echo "test.txt" >> .gitignore
touch 2.class
touch 3.class
git status
cat .gitignore
echo "*.class" > .gitignore
cat .gitignore
echo "*.txt" > .gitignore
cat .gitignore
git status
git add .
git commit -m "adding gitignore"
rm *.txt *.class

Stashing commit changes
create stash remove changes from working dir undo the changes
git status
echo "Idea 1" > filename1
echo "Idea 1" > filename2
git status
git stash
git status
cat filename1
cat filename2
cat filename1 filename2
git stash list
git stash apply stash@{1}
git status 
cat filename1
cat filename2
git add .
git commit -m "applying stash changes"
git status
git stash list
git stash clear 
git stash list

Reverting changes undo the all changes
git reser <file> --> revert uncommitted changes
git reset --soft   --> Move only to HEAD pointer repository
git reset --mixed --> move HEAD pointer and revert the staging area (default)
git reset --hard  --> move the HEAD pointer, reset staging area & working tree to the new HEAD all the 3 areas
git status
cat filename
echo "New line" > file name
git add .
git status
git reset --soft
git status
git reset --mixed
cat filename
git status
git add .
git reset --hard
cat filename
git status

 

























  




 







 
 







